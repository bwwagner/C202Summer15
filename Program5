package program5;

/*
 *  C202/I211 Summer 2015
 *  Program5.java
 *  Written By   : Branden Wagner and Tim McEndoo
 *  Date Written : 07/21/2015	
 *  Purpose      : Program 5
 *                  Use a random order plaintext dictionary input file to fill 
 *                  an array with custom singly-linked list objects. 
 *                  Use a binary search tree to spellcheck an input file 
 *                  oliver.txt, then output data on: words found,                     
 *                  mispelled, and average comparisons to find words.
 *  
 */

import java.io.*;
import program5.BinarySearchTree.TreeNode;

/**
 *
 * @author Branden Wagner
 */
public class Program5 {

    /**
     * long to keep track of the total comparisons made to find correctly
     * spelled words
     */
    protected long correctComp = 0;

    /**
     * long to keep track of the total comparisons for incorrectly spelled words
     */
    protected long incorrectComp = 0;

    /**
     * integer to keep track of the total words found in the input file,
     * oliver.txt
     */
    public int totalWords = 0;

    /**
     * integer to keep track of the number of correctly spelled words
     */
    public int correctWords = 0;

    /**
     * long to keep track of runtime of the algorithm in nanoseconds
     */
    public long elapsedTime = 0;

    /**
     * Default constructor, no arguments
     */
    public Program5() {

    }//no args constructor

    /**
     * @param args none
     * @throws java.io.IOException
     * @requires access to the source directory and the dictionary in plaintext
     * with one word per line
     */
    public static void main(String[] args) throws IOException {
        Program5 nonStatic = new Program5();
        BinarySearchTree[] dictionary = new BinarySearchTree[26];
        BufferedReader reader = null;

        for (int i = 0; i < dictionary.length; i++) {
            dictionary[i] = new BinarySearchTree<String>();
        }

        try {
            //changed from Scanner to Buffered Reader    
            reader = new BufferedReader(new FileReader("random_dictionary.txt"));
            String word;
            //read file and add words to array
            while ((word = reader.readLine()) != null) {

                word = word.toLowerCase();
                //add to array based on first letter of the word
                int indexByLet = word.charAt(0) - 97; //int value of character to index
                dictionary[indexByLet].insert(word);
            }//while

            //end dictionary creation
            reader.close();

        }//try
        catch (IOException e) {
            System.out.println("Cannot Access File.");
        } // catch io exception

        /* File is read character at a time. Then the characters are
         * concatenated to form a word. The words only contains alphabetical
         * characters. When a hyphan or a whitespace is reached, characters
         * preceding the hyphan is processed as a word.
         */
        try {
            //changed from filereader and fileinputstream to bufferedreader and filereader
            BufferedReader inf = new BufferedReader(new FileReader("oliver.txt"));
            char let;
            String str = ""; //word to be processed
            int n;

            long startTime = System.nanoTime();

            while ((n = inf.read()) != -1) {

                let = (char) n;
                if (Character.isLetter(let)) {
                    str += Character.toLowerCase(let);

                }//if character add to word

                if ((Character.isWhitespace(let) || let == '-') && !str.isEmpty()) {
                    //determine if the linked list array contains the string and increment counters
                    //long comps = dictionary[str.charAt(0) - 97].containsCount(str);
                    if (nonStatic.searchCount(dictionary[str.charAt(0) - 97], str)) { 
                        nonStatic.totalWords++;
                        nonStatic.correctWords++;
                    } else {
                        nonStatic.totalWords++;
                    }
                    //insert word to a data structure here
                    str = "";
                }//if 
            }//while read
            nonStatic.elapsedTime = System.nanoTime() - startTime;
            inf.close();
            //Output counters with labels
            nonStatic.outputData();

        } catch (IOException e) {
            System.out.println("Cannot Access File.");
        }//catch
    }//main

    /**
     * @args none
     * @ensures Output of all counters and calculated averages. Misspelled words
     * are derived from (total words-correct words)
     */
    public void outputData() {
        double avgCorrect = 0.0; //average number of comparisons to find a correct word
        double avgIncorrect = 0.0; //average number of comparisons to determine mispelled
        if (this.correctWords > 0) {
            avgCorrect = ((double)this.correctComp / this.correctWords);
            avgIncorrect = ((double)this.incorrectComp / (this.totalWords - this.correctWords));
        }
        //Output
        System.out.println("Average comparisons to find: " + avgCorrect + "\n  Total Correct: " + this.correctWords);
        System.out.println("Average comparisons for mispelled: " + avgIncorrect + "\n  Total Mispelled: " + (this.totalWords - this.correctWords));
        System.out.println("Total words: " + this.totalWords);
        System.out.println("Runtime(ns): " + this.elapsedTime);
    }//outputData

    /**
     * Returns true if the element is in the tree and updates comparison counts
     * @param tree BinarySearchTree to be searched
     * @param key  String to be found in the tree
     * @return true if the element is in the tree
     */
    public boolean searchCount(BinarySearchTree tree, String key) {
        TreeNode<String> current = tree.root; // Start from the root
        int comparisons = 0;
        while (current != null) {
            if (key.compareTo(current.element) < 0) {
                comparisons++;
                current = current.left;
            } else if (key.compareTo(current.element) > 0) {
                comparisons++;
                current = current.right;
            } else // element matches current.element
            {
                this.correctComp += comparisons;
                return true; // Element is found
            }
        }
        this.incorrectComp += comparisons;
        return false;
    }//searchCount

}//class Program5    


/*
=======+OUTPUT+=======
run:
Average comparisons to find: 15.347479231822778
  Total Correct: 937492
Average comparisons for mispelled: 10.397654077001903
  Total Mispelled: 54648
Total words: 992140
Runtime(ns): 542892771
BUILD SUCCESSFUL (total time: 0 seconds)

=======+OUTPUT+=======

=======+OUTPUT+=======
run:
Average comparisons to find: 15.347479231822778
  Total Correct: 937492
Average comparisons for mispelled: 10.397654077001903
  Total Mispelled: 54648
Total words: 992140
Runtime(ns): 552330120
BUILD SUCCESSFUL (total time: 0 seconds)

=======+OUTPUT+=======
run:
Average comparisons to find: 15.347479231822778
  Total Correct: 937492
Average comparisons for mispelled: 10.397654077001903
  Total Mispelled: 54648
Total words: 992140
Runtime(ns): 576588310
BUILD SUCCESSFUL (total time: 0 seconds)

=======+OUTPUT+=======
run:
Average comparisons to find: 15.347479231822778
  Total Correct: 937492
Average comparisons for mispelled: 10.397654077001903
  Total Mispelled: 54648
Total words: 992140
Runtime(ns): 582770740
BUILD SUCCESSFUL (total time: 0 seconds)

=======+OUTPUT+=======
run:
Average comparisons to find: 15.347479231822778
  Total Correct: 937492
Average comparisons for mispelled: 10.397654077001903
  Total Mispelled: 54648
Total words: 992140
Runtime(ns): 557751890
BUILD SUCCESSFUL (total time: 0 seconds)

=======+OUTPUT+=======
*/
